// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZapMe.Data;

#nullable disable

namespace ZapMe.Migrations
{
    [DbContext(typeof(ZapMeContext))]
    partial class ZapMeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseHiLo(modelBuilder, "EntityFrameworkHiLoSequence");

            modelBuilder.HasSequence("EntityFrameworkHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.Entity("ZapMe.Data.Models.FriendRequestEntity", b =>
                {
                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("senderId");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid")
                        .HasColumnName("receiverId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("now()");

                    b.HasKey("SenderId", "ReceiverId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("friendRequests", (string)null);
                });

            modelBuilder.Entity("ZapMe.Data.Models.ImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("HashPerceptual")
                        .HasColumnType("bigint")
                        .HasColumnName("phash");

                    b.Property<string>("HashSha256")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("sha256");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<int>("SizeBytes")
                        .HasColumnType("integer")
                        .HasColumnName("sizeBytes");

                    b.Property<Guid?>("UploaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("uploaderId");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("UploaderId");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("ZapMe.Data.Models.LockOutEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiresAt");

                    b.Property<string>("Flags")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("flags");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("lockOuts", (string)null);
                });

            modelBuilder.Entity("ZapMe.Data.Models.OAuthConnectionEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("providerName");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("providerId");

                    b.HasKey("UserId", "ProviderName");

                    b.ToTable("oauthConnections", (string)null);
                });

            modelBuilder.Entity("ZapMe.Data.Models.SignInEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("deviceName");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiresAt");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("signIns", (string)null);
                });

            modelBuilder.Entity("ZapMe.Data.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("AcceptedTosVersion")
                        .HasColumnType("integer")
                        .HasColumnName("acceptedTosVersion");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("emailVerified");

                    b.Property<DateTime>("LastOnline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastOnline")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("OnlineStatus")
                        .HasColumnType("integer")
                        .HasColumnName("statusOnline");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("passwordHash");

                    b.Property<DateTime?>("PasswordResetRequestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("passwordResetRequestedAt");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("passwordResetToken");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uuid")
                        .HasColumnName("profilePictureId");

                    b.Property<string>("StatusText")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("statusText");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("userName");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("users_email_idx");

                    b.HasIndex("PasswordResetToken")
                        .IsUnique()
                        .HasDatabaseName("users_passwordResetToken_idx");

                    b.HasIndex("ProfilePictureId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("users_username_idx");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ZapMe.Data.Models.UserRelationEntity", b =>
                {
                    b.Property<Guid>("SourceUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("sourceUserId");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("targetUserId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("NickName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("nickName");

                    b.Property<string>("Notes")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("notes");

                    b.Property<int>("RelationType")
                        .HasColumnType("integer")
                        .HasColumnName("relationType");

                    b.HasKey("SourceUserId", "TargetUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("userRelations", (string)null);
                });

            modelBuilder.Entity("ZapMe.Data.Models.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.Property<string>("RoleName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("roleName");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("now()");

                    b.HasKey("UserId", "RoleName");

                    b.HasIndex("RoleName")
                        .HasDatabaseName("userRoles_roleName_idx");

                    b.HasIndex("UserId")
                        .HasDatabaseName("userRoles_userId_idx");

                    b.ToTable("userRoles", (string)null);
                });

            modelBuilder.Entity("ZapMe.Data.Models.FriendRequestEntity", b =>
                {
                    b.HasOne("ZapMe.Data.Models.UserEntity", "Receiver")
                        .WithMany("FriendRequestsIncoming")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZapMe.Data.Models.UserEntity", "Sender")
                        .WithMany("FriendRequestsOutgoing")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ZapMe.Data.Models.ImageEntity", b =>
                {
                    b.HasOne("ZapMe.Data.Models.UserEntity", "Uploader")
                        .WithMany()
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("ZapMe.Data.Models.LockOutEntity", b =>
                {
                    b.HasOne("ZapMe.Data.Models.UserEntity", "User")
                        .WithMany("LockOuts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZapMe.Data.Models.OAuthConnectionEntity", b =>
                {
                    b.HasOne("ZapMe.Data.Models.UserEntity", "User")
                        .WithMany("OauthConnections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZapMe.Data.Models.SignInEntity", b =>
                {
                    b.HasOne("ZapMe.Data.Models.UserEntity", "User")
                        .WithMany("SignIns")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZapMe.Data.Models.UserEntity", b =>
                {
                    b.HasOne("ZapMe.Data.Models.ImageEntity", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("ZapMe.Data.Models.UserRelationEntity", b =>
                {
                    b.HasOne("ZapMe.Data.Models.UserEntity", "SourceUser")
                        .WithMany("Relations")
                        .HasForeignKey("SourceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZapMe.Data.Models.UserEntity", "TargetUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("ZapMe.Data.Models.UserRoleEntity", b =>
                {
                    b.HasOne("ZapMe.Data.Models.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZapMe.Data.Models.UserEntity", b =>
                {
                    b.Navigation("FriendRequestsIncoming");

                    b.Navigation("FriendRequestsOutgoing");

                    b.Navigation("LockOuts");

                    b.Navigation("OauthConnections");

                    b.Navigation("Relations");

                    b.Navigation("SignIns");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
